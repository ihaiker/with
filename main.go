package main

import (
	"bytes"
	"fmt"
	"github.com/ihaiker/wither/parse"
	"golang.org/x/tools/imports"
	"io/ioutil"
	"os"
	"path/filepath"
)

var header = []byte(`

// This file was automatically generated by with.
// Any changes will be lost if this file is regenerated.
// see https://github.com/ihaiker/with

`)

func main() {
	if len(os.Args) == 1 {
		fmt.Println("Usage: wither <file> ")
		os.Exit(1)
	}
	filename := os.Args[1]

	if finfo, err := os.Stat(filename); err != nil {
		fmt.Println(err)
		os.Exit(1)
	} else if finfo.IsDir() {
		fmt.Println(filename, " is dir")
		os.Exit(1)
	}

	outfile := filepath.Join(filepath.Dir(filename), "with-"+filepath.Base(filename))

	if packageName, pkgImports, ds, err := parse.Find(filename); err == nil {
		output := bytes.NewBuffer(header)
		output.WriteString(fmt.Sprintf("package %s \n ", packageName))

		output.WriteString("import (\n")
		for path, name := range pkgImports {
			if name == "" {
				output.WriteString(fmt.Sprintf("\t%s\n", path))
			} else {
				output.WriteString(fmt.Sprintf("\t%s %s\n", name, path))
			}
		}
		output.WriteString(")\n\n")

		for _, d := range ds {

			for _, field := range d.Fields {
				if field.IsPrivate() && d.Getter {
					output.WriteString(fmt.Sprintf("func (self *%s) Get%s() %s { \n", d.Name, field.GetName(), field.Type))
					output.WriteString(fmt.Sprintf("\treturn self.%s\n", field.GetName()))
					output.WriteString("}\n")
				}

				if !field.IsPrivate() && d.Wither {
					//public func
					output.WriteString(fmt.Sprintf("func With%s%s(%s %s) *%s { \n",
						d.Name, field.GetName(), field.GetName(), field.Type, d.Name))
					output.WriteString(fmt.Sprintf("\treturn %s{}.With%s(%s) \n", d.Name, field.GetName(), field.GetName()))
					output.WriteString("}\n")

					//struct func
					output.WriteString(fmt.Sprintf("func (self *%s) With%s(%s %s) *%s { \n",
						d.Name, field.GetName(), field.GetName(), field.Type, d.Name))
					output.WriteString(fmt.Sprintf("\tself.%s = %s\n", field.GetName(), field.GetName()))
					output.WriteString("\treturn self\n")
					output.WriteString("}\n")
				}
			}
		}

		if out, err := imports.Process(outfile, output.Bytes(), nil); err != nil {
			fmt.Println(err)
		} else {
			err = ioutil.WriteFile(outfile, out, os.ModePerm)
			fmt.Println(err)
		}
	}
}
